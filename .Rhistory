7 + 3
demo()
install.packages("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
5 + 7
x <- 5 + 7
x
y <- x -3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
C(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
dir()
?list.files
args(list.files)
old.dir <- dir()
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2", "mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
unlink("testdir2")
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink("testdir", recursive = TRUE)
swirl()
library(swirl)
swirl()
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1,2), times = 10)
rep(c(0, 1, 2), each=10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
print(my_char)
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Lee Davies")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep ="-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6!=8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
clear
clear()
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div =2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){ x + 1}, 6)
evaluate(function(x) {x[1]}, c(8, 4, 0))
evaluate(function(x) {x[3]}, c(8, 4, 0))
evaluate(function(x) {x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("Hello", "World")
submit()
mad_libs(place = "here", adjective = "there", noun = "durgh")
submit()
'I' %p% 'love' %p% 'R!'
library(swirl)
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
library(swirl)
swirl()
head(flag, 6)
head(flags, 6)
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lappy(flag_shapes, range)
lapply(flag_shapes, range)
shap_mat <- sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flagsm unique)
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flag$red, summary)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data("iris")
?iris
iris
lappy(iris, mean())
lapply(iris, mean)
colMeans(iris)
colMeans(iris[,1])
?colMean
?colMeans
colMeans(iris, dims=1)
colMeans(iris[,1], dims=1)
rowMean(iris[, 1:4])
rowMeans(iris[, 1:4])
colMeans(iris[, 1])
colMeans(iris[2, ])
rowMeans(iris[, 1:4])
colMeans(iris)
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
apply(iris, 1, mean)
library(datasets)
data(mtcars)
apply(mtcars, 2, mean)
lapply(mtcars, mean)
mean(mtcars$mpg, mtcars$cyl)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
split(mtcars, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(mtcars, cyl, mean)
mtcars
tapply(mtcars$cyl, mtcars$hp, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
hp_val <- tapply(mtcars$hp, mtcars$cyl, mean)
hp_val[3] - hp_val[1]
hp_val[3]
hp_val[4]
hp_val[1]
round(hp_val[3] - hp_val[1])
iris
tapply(iris, iris[, iris$Species = 'virginica'], mean)
tapply(iris, iris[, iris$Species] = 'virginica', mean)
tapply(iris, iris$Species, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
iris_vals <- tapply(iris$Sepal.Length, iris$Species, mean)
iris_vals
round(iris_vals$Virginica)
round(iris_vals[3])
tapply(iris$Species, iris$Sepal.Length, mean)
getwd()
setwd("D:/ProgrammingAssignment2")
dir()
source('cachematrix.r')
makeCacheMatrix()
source('cachematrix.r')
cmmat <- makeCacheMatrix()
cmmat
class(cmmat)
source('cachematrix.r')
cmmat <- makeCacheMatrix()
?"matrix"
?list
?"matrix"
x <- matrix(1:6)
x
makeCacheMatrix(x)
source('cachematrix.r')
makeCacheMatrix(x)
x
cacheSolve(x)
y <- makeCacheMatrix(x)
cacheSolve(y)
x <- matrix(1:4, nrows = 2, ncols = 2)
source('cachematrix.r')
x <- matrix(1:4, nrow = 2, ncol = 2)
y <- makeCacheMatrix(x)
cacheSolve(y)
cacheSolve(y)
cacheSolve(y)
?sole
?solve
x
x <- matrix(1:6, nrow = 3, ncol = 3)
cacheSolve(y)
y <- makeCacheMatrix(x)
cacheSolve(y)
y
x
cacheSolve(y)
y
y$get()
y$getsolve()
cacheSolve(y)
cacheSolve(y, LINPACK = TRUE)
View(makeCacheMatrix)
View(x)
x <- matrix(1:9, nrow = 3, ncol = 3)
y <- makeCacheMatrix(x)
cacheSolve(y)
solve.qr(x)
solve(x)
x <- matrix(1:4, nrow = 2, ncol = 2)
y <- makeCacheMatrix(x)
cacheSolve(y)
x
x * y
solve(x) %*% x
y$get() %*% x
y$get() %*% y
y$get() %*% y$get()
c=rbind(c(1, -1/4), c(-1/4, 1))
makeCacheMatrix(c)
cacheSolve(y)
y <- makeCacheMatrix(c)
cacheSolve(y)
y$get() %*% x
y$get() %*% c
c
cacheSolve(cmmat)
